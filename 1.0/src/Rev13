// Humidity and temperature sensor and sensing code: copyright, Peter H Anderson, Baltimore, MD, Nov, '07
//
// Input, dial, mode selection, and relay control code: Kiz, May, 2009
//
// Output: Humidity and Temperature adjusting using relays
// Relay 1 (humidifier) turns on until Max humidity is reached; stays off until Min humidity is reached
// Relay 2 (heater) turns on until Max temperature is reached; stays off until Min temperature is reached
// Dial used to select preset, changing Min and Max temperature and humidity
// LED is a confirmation and power light
// 
//
// Humidity and Temperature Sensor Pins: Yellow-Analog 2, Blue-Digital 5, Red-Digital 4, Black-Ground(-)
// 

#include <avr/io.h>
#include <math.h>
#include <DateTime.h>
#include <DateTimeStrings.h>

#define TIME_MSG_LEN  11   // time sync to PC is HEADER followed by unix time_t as ten ascii digits
#define TIME_HEADER  'T'   // Header tag for serial time sync message
#define MODE_HEADER  'S'   // Header tag for serial mode select
#define CUS_HEADER   'R'   // Header tag for serial custom mode set

#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

#define POWER_PIN 4	   // OUTPUT Pin Digital 2, 555 Pulse (Blue)
#define TEMP_PIN 2	   // INPUT Pin Analog 5, Temperature sensor (Yellow)

#define LED1 13		   // Output Pin Digital 13, LED-1 
#define HUM_PIN 3	   // Output Pin Digital 11, Relay 1 Humidifier
#define HEAT_PIN 2	   // Output Pin Digital 10, Relay 2 Heater

/* Life Cycle Presets
 1: Spawn Run: 10-14 days. Post Casing/Prepinning: 5-10 days.
    Airflow: None, need High CO2. Light: Dark. Humidity: . Heat: 
 2: Primordia Formation: 6-10 days
    Airflow: Yes. Light: 12-16h/day, Diffuse natural or grow-lux peak at 480nm. Humidity: . Heat: 
 3: Cropping: Harvest
    Airflow: . Light: Indirect natural or above. Harvest when cap becomes convex and soon after partial veil ruptures. Humidity: . Heat: 
 4:
 5:
 6:
*/
    
// Min Humidity, Max Hum, Min Temperature, Max Temp
int last = 0, preset[6][4] = {{70, 75, 83, 83},        // Preset 1 
         	              {10, 99, 10, 99},        // Preset 2
          	              {85, 92, 74, 78},        // Preset 3 
            	              {50, 55, 80, 86},        // Preset 4
                              {50, 65, 80, 86},        // Preset 5 Configurable
                              {10, 10, 10, 10}};       // Preset 6 Off

long previousmillis = 0;    // will store last time updated
long interval = 90000;      // interval at which to print status (milliseconds)
int stat = 1, s = 6;        // stat=show status? s=preset 
int remote = 0, serial = 0; // remote=serial input active signal, serial=input
int h_plus = 0, t_plus = 0; // remember the state of the relays
char ser_header = 'X';      // reset header variable for next input

unsigned int count_transitions(int ms);
unsigned long prevtime;

void setup(){
    Serial.begin(9600);
    pinMode(LED1, OUTPUT);     // LED 1
    pinMode(HUM_PIN, OUTPUT);  // Relay 1 Humidifier
    pinMode(HEAT_PIN, OUTPUT); // Relay 2 Heater

    pinMode(6, INPUT);         // dial position 1
    pinMode(7, INPUT);         // dial position 2
    pinMode(8, INPUT);         // dial position 3
    pinMode(9, INPUT);         // dial position 4
    pinMode(10, INPUT);        // dial position 5
    pinMode(11, INPUT);        // dial position 6
    
    digitalWrite(HUM_PIN, LOW);
    digitalWrite(HEAT_PIN, LOW);
}

void  loop() {
    float RH_raw, RH_corrected, Tc, Tf, Tc_dew_point, Tf_dew_point;

    Serial.println("T Hum  Mn Mx TempC Tempf Mn Mx DewPc DewPf F H  1 2 3 4 5 6");
    
    while(1) {
        RH_raw = measure_RH();
        Tc = measTemperature(TEMP_PIN);
	Tf = (Tc * 9) / 5 + 32;
        RH_corrected = calc_RH_corrected(RH_raw, Tc);
        Tc_dew_point = calc_dew_point(Tc, RH_corrected);
        Tf_dew_point = (Tc_dew_point * 9) / 5 + 32;
        
        ser_header = Serial.read();        // Read input
        if (ser_header != 'X') chkInput(); // Check for S or R as HEADER to the input
        if (remote == 0) dialRead();       // If mode-changing input has not been accepted, use dial to set mode
        relayCtrl(RH_corrected, Tf);       // Control Relays (on/off), determined by mode
        
        if (abs(millis() - previousmillis) > interval || stat == 1) {
            previousmillis = millis();

            printtime();
            print_float(RH_corrected, 1);
            Serial.print(" ");
            Serial.print(preset[s][0]);
            Serial.print(" ");
            Serial.print(preset[s][1]);
            Serial.print(" ");
            print_float(Tc, 2);
            Serial.print(" ");
	    print_float(Tf, 2);
            Serial.print(" ");
            Serial.print(preset[s][2]);
            Serial.print(" ");
            Serial.print(preset[s][3]);
	    Serial.print(" ");
            print_float(Tc_dew_point, 2);
            Serial.print(" ");
            print_float(Tf_dew_point, 2);
            Serial.print(" ");
            Serial.print(digitalRead(HUM_PIN));
            Serial.print(" ");
            Serial.print(digitalRead(HEAT_PIN));
            Serial.print("  ");
            Serial.print(digitalRead(6));
            Serial.print(" ");
            Serial.print(digitalRead(7));
            Serial.print(" ");
            Serial.print(digitalRead(8));
            Serial.print(" ");
            Serial.print(digitalRead(9));
            Serial.print(" ");
            Serial.print(digitalRead(10));
            Serial.print(" ");
            Serial.print(digitalRead(11));
            Serial.println();
            stat = 0;
        }
    } 
}



// Check for R or S input
void chkInput() {
    if (ser_header == CUS_HEADER) { // R Input - Change configurable mode 5
        serial = 0;
        remote = 1;
        for (int i = 0; i < 4; i++){
            for (int j = 0; j < 2; j++) {
                char c = Serial.read();     
                if (c >= '0' && c <= '9' && j == 0) preset[4][i] = c - '0';
                if (c >= '0' && c <= '9' && j == 1) preset[4][i] = (10 * preset[4][i]) + (c - '0'); // convert digits to a number
            }
        }
        printtime();
        Serial.println("Custom Mode Set");
        button(5, 10, 5);
    }

    if (ser_header == MODE_HEADER) { // S Inputs
        serial = Serial.read();
        serial = serial - '0';       // convert to number
        if (serial > 0 && serial < 7) remote = 1;
        if (serial >= 0 && serial <= 9 ) {
            printtime();
            Serial.print("Input accepted: S");
            switch (serial) {
                case 0:
                    Serial.println("0: Status");
                    stat = 1;
                    break;
                case 1:
                    Serial.println("1: Serial Input Induced Mode");
                    button(1, serial + 5, last);
                    break;
                case 2:
                    Serial.println("2: Serial Input Induced Mode");
                    button(2, serial + 5, last);
                    break;
                case 3:
                    Serial.println("3: Serial Input Induced Mode");
                    button(3, serial + 5, last);
                    break;
                case 4:
                    Serial.println("4: Serial Input Induced Mode");
                    button(4, serial + 5, last);
                    break;
                case 5:
                    Serial.println("5: Serial Input Induced Mode");
                    button(5, serial + 5, last);
                    break;
                case 6:
                    Serial.println("6: Serial Input, Induced Mode");
                    button(6, serial + 5, last);
                    break;
                case 7:
                    Serial.println("7: Use Clocktower for Mode Adjustment");
                    remote = 0;
                    last = 0;
                    stat = 1;
                    break;
                case 8:
                    Serial.println("9: Display Presets, Modes 1 - 6");
                    Serial.println("  %Humid  Temp F");
                    Serial.println("  Min Max Min Max");
                    for (int i = 0; i < 6; i++) {
                        Serial.print(i + 1);
                        Serial.print(" ");
                        for (int j = 0; j < 4; j++) {
                            Serial.print(preset[i][j]);
                            Serial.print("  ");
                        }
                        Serial.println();
                    }
                    break;
                case 9:
                    Serial.println(serial);
                    break;
            }
        }
        else {
            Serial.println("Recognized Inputs:");
            Serial.println("S0 Status");
            Serial.println("S1 Mode 1 Override");
            Serial.println("S2 Mode 2 Override");
            Serial.println("S3 Mode 3 Override");
            Serial.println("S4 Mode 4 Override");
            Serial.println("S5 Mode 5 Override");
            Serial.println("S6 Mode 6 Override");
            Serial.println("S7 Reset Mode to Clocktower");
            Serial.println("S8 Display Presets");
        }
        ser_header = 'X';
    }

    if (ser_header == TIME_HEADER) { // T Input - Set Time 
        time_t pctime = 0;
        for(int i = 0; i < TIME_MSG_LEN - 1; i++){   
            char c= Serial.read();          
            if (c >= '0' && c <= '9') pctime = (10 * pctime) + (c - '0'); // convert digits to a number
        }
        pctime = pctime - 14400; // adjust from UTC for -4 hours (time zone difference)
        DateTime.sync(pctime);   // Sync Arduino clock to the time received on the serial port
        Serial.print(abs(millis() / 1000));
        Serial.print(" ");
        Serial.print("Clock synced with: ");
        Serial.print(TIME_HEADER,BYTE);
        Serial.print(DateTime.now(),DEC);
        Serial.print(" - ");
        printtime();
        Serial.println();
        Serial.println("Time Weekday Month Day Hum Mn Mx TempC Tempf Mn Mx DewPc DewPf F H  1 2 3 4 5 6");
        stat = 1;
    }
    ser_header = 'X';
}



// Check state of dial and set mode
void dialRead() {
    for (int i = 6; i < 12; i++) {
        if (digitalRead(i) == HIGH) {  // Check input for HIGH (1, Closed circuit, 100 ohm resistance) or LOW (0, 10k ohm resistance)
            switch (i) {
                case 6:
                    button(1, i, last);
                    break;
                case 7:
                    button(2, i, last);
                    break;
                case 8:
                    button(3, i, last);
                    break;
                case 9:
                    button(4, i, last);
                    break;
                case 10:
                    button(5, i, last);
                    break;
                case 11:
                    button(6, i, last);
                    break;
            }
        last = i;
        }
    }
}



// Relay control
void relayCtrl(int RH_corrected, int Tf) {
    if (h_plus == 1 && RH_corrected > preset[s][1]) {  // Turn off Relay 1 (Humidifier) at Max Humidity
        digitalWrite(HUM_PIN, LOW);
        stat = 1;
	h_plus = 0;
    }
    else if (RH_corrected < preset[s][0] && digitalRead(HUM_PIN) != HIGH) {	 // Turn on Relay 1 at Min Humidity
        digitalWrite(HUM_PIN, HIGH);
        stat = 1;
        h_plus = 1;
    }    

    if (t_plus == 1 && Tf > preset[s][3]) {  // Turn off Relay 2 (Heater) at Max Temperature
        digitalWrite(HEAT_PIN, LOW);
        stat = 1;
        t_plus = 0;
    }
    else if (Tf < preset[s][2] && digitalRead(HEAT_PIN) != HIGH) {  // Turn of Relay 2 at Min Temperature
        digitalWrite(HEAT_PIN, HIGH);
        stat = 1;
        t_plus = 1;
    }
}



// Time management and display, Arduino library
void printtime() {
    if(DateTime.available()) {               // update clocks if time has been synced
        prevtime = DateTime.now();
        while(prevtime == DateTime.now())    // wait for the second to rollover
            ;
        DateTime.available();                // refresh the Date and time properties
        digitalClockDisplay();               // update digital clock
                                             // send our time to any app at the other end of the serial port
    }
    else Serial.print(abs(millis() / 1000));
    Serial.print(" ");
}
void digitalClockDisplay() {
    // digital clock display of current date and time
    Serial.print(DateTime.Hour,DEC);
    printDigits(DateTime.Minute);
    printDigits(DateTime.Second);
    Serial.print(" ");
    Serial.print(DateTimeStrings.dayStr(DateTime.DayofWeek));
    Serial.print(" ");
    Serial.print(DateTimeStrings.monthStr(DateTime.Month));
    Serial.print(" ");
    Serial.print(DateTime.Day,DEC); 
}
void printDigits(byte digits) {
    // utility function for digital clock display: prints preceding colon and leading 0
    Serial.print(":");
    if (digits < 10)
        Serial.print('0');
    Serial.print(digits,DEC);
}



// Mode change and status indicator
void button(int mode, int i, int last) {
    if (last != i) {
        printtime();
        Serial.print("Mode ");
        Serial.println(mode);
        blink(LED1, 10, 50);
        delay(1000);
        blink(LED1, mode, 150);
        stat = 1;
        s = i - 6;
    }
}
void blink(int LED, int num, int dur) {
    for (int i = 1; i <= num; i++) {
	digitalWrite(LED, HIGH);
	delay(dur);
	digitalWrite(LED, LOW);
	delay(dur);
    }
}



// Temperature & Humidity sensing, Peter H Anderson
float calc_dew_point(float Tc, float RH) {
     const float a = 17.27, b = 237.7;
     float x, Tc_dew;

     x = (a * Tc) / (b + Tc) + log(RH/100.0);
     Tc_dew = (b * x) / (a - x);
     return(Tc_dew);
}
float measure_RH(void) {
     long RH_count;
     float RH_raw;

     pinMode(POWER_PIN, OUTPUT);
     digitalWrite(POWER_PIN, HIGH);   	// power up the 555 cicuit
     delay(500);   			// allow some time for the 555 to stabilize

     RH_count = count_transitions(1000);
     //Serial.println(RH_count); 	// for debugging
     RH_raw = 557.7 - 0.0759 * RH_count;

     digitalWrite(POWER_PIN, LOW); 	// turn off the 555
     return(RH_raw);
}
float calc_RH_corrected(float RH_raw, float Tc) {
    float T_diff, RH_corrected;

    T_diff = Tc - 25.00;
    RH_corrected = (1.0 + 0.001 * T_diff) * RH_raw;
    return(RH_corrected);
}
unsigned int count_transitions(int ms) { // configure Counter 1
     cbi(TCCR1A, WGM11);
     cbi(TCCR1A, WGM10);

     cbi(TCCR1B, WGM12);	// WGM12::WGM10 000 - Normal mode

     sbi(TCCR1B, CS12);		// CS12::CS10 111 - External clock, count on rising edge.
     sbi(TCCR1B, CS11);
     sbi(TCCR1B, CS10);

     TCNT1 = 0x0000;		// note that TCNT1 is 16-bits
     delay(1000);
     				// not sure if should turn off the counter
     return(TCNT1);
}
float measTemperature(int analog_channel) {
    int ADVal;
    float RThermistor, Tc;

    ADVal = analogRead(analog_channel);
    RThermistor = calcRthermistor(ADVal);
    //Serial.println(analogRead(analog_channel));
    Tc = calcTc(RThermistor);
    return(Tc);
}
float calcRthermistor(int ADVal) {
    float Rtherm;
    if (ADVal <= 0) { // avoid trouble conditions
       ADVal = 10;
    }
    Rtherm = 10.0e3 / (1024.0 /((float) ADVal) - 1.0);
    //Serial.println(Rtherm);
    return(Rtherm);
}
float calcTc(float RTherm) {
    const float A_const = 3.354016e-3;
    const float B_const = 2.569107e-4;
    const float C_const = 2.626311e-6;
    const float D_const = 0.675278e-7;

    float x, TKelvin, Tc;

    x = log(RTherm / 10.0e3);
    TKelvin = 1.0 / (A_const + B_const * x
                + C_const * square(x) + D_const * cube(x));
     Tc = TKelvin - 273.15;
    return(Tc);
}
float square(float x) {
    return(x * x);
}
float cube(float x) {
    return(square(x) * x);
}
void print_float(float f, int num_digits) {
    int f_int;
    int pows_of_ten[4] = {1, 10, 100, 1000};
    int multiplier, whole, fract, d, n;

    multiplier = pows_of_ten[num_digits];
    if (f < 0.0) {
        f = -f;
        Serial.print("-");
    }
    whole = (int) f;
    fract = (int) (multiplier * (f - (float)whole));

    Serial.print(whole);
    Serial.print(".");

    for (n = num_digits - 1; n >= 0; n--) // print each digit with no leading zero suppression
    {
         d = fract / pows_of_ten[n];
         Serial.print(d);
         fract = fract % pows_of_ten[n];
    }
}
